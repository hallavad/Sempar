// Implementation file for parser generated by fsyacc
module ArithParser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "ArithParser.sempar"

open ArithAST 
open Diagnostics

# 11 "ArithParser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | PLUS
  | MINUS
  | TIMES
  | DIV
  | LPAR
  | RPAR
  | EOF
  | VAR of (string)
  | NUM of (float)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_TIMES
    | TOKEN_DIV
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_EOF
    | TOKEN_VAR
    | TOKEN_NUM
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startexpr
    | NONTERM_expr

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | PLUS  -> 0 
  | MINUS  -> 1 
  | TIMES  -> 2 
  | DIV  -> 3 
  | LPAR  -> 4 
  | RPAR  -> 5 
  | EOF  -> 6 
  | VAR _ -> 7 
  | NUM _ -> 8 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_PLUS 
  | 1 -> TOKEN_MINUS 
  | 2 -> TOKEN_TIMES 
  | 3 -> TOKEN_DIV 
  | 4 -> TOKEN_LPAR 
  | 5 -> TOKEN_RPAR 
  | 6 -> TOKEN_EOF 
  | 7 -> TOKEN_VAR 
  | 8 -> TOKEN_NUM 
  | 11 -> TOKEN_end_of_input
  | 9 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startexpr 
    | 1 -> NONTERM_expr 
    | 2 -> NONTERM_expr 
    | 3 -> NONTERM_expr 
    | 4 -> NONTERM_expr 
    | 5 -> NONTERM_expr 
    | 6 -> NONTERM_expr 
    | 7 -> NONTERM_expr 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 11 
let _fsyacc_tagOfErrorTerminal = 9

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | TIMES  -> "TIMES" 
  | DIV  -> "DIV" 
  | LPAR  -> "LPAR" 
  | RPAR  -> "RPAR" 
  | EOF  -> "EOF" 
  | VAR _ -> "VAR" 
  | NUM _ -> "NUM" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | TIMES  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | LPAR  -> (null : System.Object) 
  | RPAR  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | VAR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NUM _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us;65535us;6us;65535us;0us;1us;2us;3us;9us;5us;10us;6us;11us;7us;12us;8us;|]
let _fsyacc_sparseGotoTableRowOffsets = [|0us;1us;|]
let _fsyacc_stateToProdIdxsTableElements = [| 1us;0us;5us;0us;2us;3us;4us;5us;1us;1us;5us;1us;2us;3us;4us;5us;1us;1us;5us;2us;2us;3us;4us;5us;5us;2us;3us;3us;4us;5us;5us;2us;3us;4us;4us;5us;5us;2us;3us;4us;5us;5us;1us;2us;1us;3us;1us;4us;1us;5us;1us;6us;1us;7us;|]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us;2us;8us;10us;16us;18us;24us;30us;36us;42us;44us;46us;48us;50us;52us;|]
let _fsyacc_action_rows = 15
let _fsyacc_actionTableElements = [|3us;32768us;4us;2us;7us;14us;8us;13us;4us;49152us;0us;11us;1us;12us;2us;9us;3us;10us;3us;32768us;4us;2us;7us;14us;8us;13us;5us;32768us;0us;11us;1us;12us;2us;9us;3us;10us;5us;4us;0us;16385us;0us;16386us;0us;16387us;0us;16388us;0us;16389us;3us;32768us;4us;2us;7us;14us;8us;13us;3us;32768us;4us;2us;7us;14us;8us;13us;3us;32768us;4us;2us;7us;14us;8us;13us;3us;32768us;4us;2us;7us;14us;8us;13us;0us;16390us;0us;16391us;|]
let _fsyacc_actionTableRowOffsets = [|0us;4us;9us;13us;19us;20us;21us;22us;23us;24us;28us;32us;36us;40us;41us;|]
let _fsyacc_reductionSymbolCounts = [|1us;3us;3us;3us;3us;3us;1us;1us;|]
let _fsyacc_productionToNonTerminalTable = [|0us;1us;1us;1us;1us;1us;1us;1us;|]
let _fsyacc_immediateActions = [|65535us;65535us;65535us;65535us;16385us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;16390us;16391us;|]
let _fsyacc_reductions = lazy [|
# 122 "ArithParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Diagnostics<Arith> in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startexpr));
# 131 "ArithParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> Diagnostics<Arith> in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 16 "ArithParser.sempar"
                                       sempar {
                       let! semparVar2 = _2
                       return ( semparVar2 )
                     }
                   )
# 16 "ArithParser.sempar"
                 : Diagnostics<Arith>));
# 145 "ArithParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Diagnostics<Arith> in
            let _3 = parseState.GetInput(3) :?> Diagnostics<Arith> in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 24 "ArithParser.sempar"
                                        sempar {
                       let! semparVar1 = _1
                       let! semparVar3 = _3
                       do! warnWhen "Are you sure that you want to multiply by 0? It will be simplified." (semparVar3 = Num 0)
                       do! warnWhen "Are you sure that you want to multiply by 1? It will be simplified." (semparVar3 = Num 1)
                       return ( Mul (semparVar1, semparVar3) )
                     }
                   )
# 24 "ArithParser.sempar"
                 : Diagnostics<Arith>));
# 163 "ArithParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Diagnostics<Arith> in
            let _3 = parseState.GetInput(3) :?> Diagnostics<Arith> in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 34 "ArithParser.sempar"
                                      sempar {
                       let! semparVar1 = _1
                       let! semparVar3 = _3
                       do! errorWhen "Are you sure that you want to divide by 0? It will not work." (semparVar3 = Num 0)
                       do! warnWhen "Are you sure that you want to divide by 1? It will be simplified." (semparVar3 = Num 1)
                       return ( Div (semparVar1, semparVar3) )
                     }
                   )
# 34 "ArithParser.sempar"
                 : Diagnostics<Arith>));
# 181 "ArithParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Diagnostics<Arith> in
            let _3 = parseState.GetInput(3) :?> Diagnostics<Arith> in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 42 "ArithParser.sempar"
                                       sempar {
                       let! semparVar1 = _1
                       let! semparVar3 = _3
                       do! warnWhen "Are you sure that you want to add 0? It will be simplified." (semparVar3 = Num 0)
                       return ( Add (semparVar1, semparVar3) )
                     }
                   )
# 42 "ArithParser.sempar"
                 : Diagnostics<Arith>));
# 198 "ArithParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Diagnostics<Arith> in
            let _3 = parseState.GetInput(3) :?> Diagnostics<Arith> in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 49 "ArithParser.sempar"
                                        sempar {
                       let! semparVar1 = _1
                       let! semparVar3 = _3
                       do! warnWhen "Are you sure that you want to subtract 0? It will be simplified." (semparVar3 = Num 0)
                       return ( Sub (semparVar1, semparVar3) )
                     }
                   )
# 49 "ArithParser.sempar"
                 : Diagnostics<Arith>));
# 215 "ArithParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> float in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 55 "ArithParser.sempar"
                            sempar {
                       let semparVar1 = _1
                       return ( Num semparVar1 )
                     }
                   )
# 55 "ArithParser.sempar"
                 : Diagnostics<Arith>));
# 229 "ArithParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 60 "ArithParser.sempar"
                            sempar {
                       let semparVar1 = _1
                       return ( Var semparVar1 )
                     }
                   )
# 60 "ArithParser.sempar"
                 : Diagnostics<Arith>));
|]
# 244 "ArithParser.fs"
let tables : FSharp.Text.Parsing.Tables<_> = 
  { reductions = _fsyacc_reductions.Value;
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 12;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = tables.Interpret(lexer, lexbuf, startState)
let expr lexer lexbuf : Diagnostics<Arith> =
    engine lexer lexbuf 0 :?> _
