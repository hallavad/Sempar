// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 2 "Parser.fsy"

open JsonParsing

# 10 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | COMMA
  | COLON
  | RIGHT_BRACK
  | LEFT_BRACK
  | RIGHT_BRACE
  | LEFT_BRACE
  | NULL
  | FALSE
  | TRUE
  | STRING of (string)
  | ID of (string)
  | FLOAT of (float)
  | INT of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_COMMA
    | TOKEN_COLON
    | TOKEN_RIGHT_BRACK
    | TOKEN_LEFT_BRACK
    | TOKEN_RIGHT_BRACE
    | TOKEN_LEFT_BRACE
    | TOKEN_NULL
    | TOKEN_FALSE
    | TOKEN_TRUE
    | TOKEN_STRING
    | TOKEN_ID
    | TOKEN_FLOAT
    | TOKEN_INT
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_prog
    | NONTERM_value
    | NONTERM_object_fields
    | NONTERM_rev_object_fields
    | NONTERM_array_values
    | NONTERM_rev_values

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | COMMA  -> 1 
  | COLON  -> 2 
  | RIGHT_BRACK  -> 3 
  | LEFT_BRACK  -> 4 
  | RIGHT_BRACE  -> 5 
  | LEFT_BRACE  -> 6 
  | NULL  -> 7 
  | FALSE  -> 8 
  | TRUE  -> 9 
  | STRING _ -> 10 
  | ID _ -> 11 
  | FLOAT _ -> 12 
  | INT _ -> 13 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_COMMA 
  | 2 -> TOKEN_COLON 
  | 3 -> TOKEN_RIGHT_BRACK 
  | 4 -> TOKEN_LEFT_BRACK 
  | 5 -> TOKEN_RIGHT_BRACE 
  | 6 -> TOKEN_LEFT_BRACE 
  | 7 -> TOKEN_NULL 
  | 8 -> TOKEN_FALSE 
  | 9 -> TOKEN_TRUE 
  | 10 -> TOKEN_STRING 
  | 11 -> TOKEN_ID 
  | 12 -> TOKEN_FLOAT 
  | 13 -> TOKEN_INT 
  | 16 -> TOKEN_end_of_input
  | 14 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_prog 
    | 3 -> NONTERM_prog 
    | 4 -> NONTERM_value 
    | 5 -> NONTERM_value 
    | 6 -> NONTERM_value 
    | 7 -> NONTERM_value 
    | 8 -> NONTERM_value 
    | 9 -> NONTERM_value 
    | 10 -> NONTERM_value 
    | 11 -> NONTERM_value 
    | 12 -> NONTERM_object_fields 
    | 13 -> NONTERM_rev_object_fields 
    | 14 -> NONTERM_rev_object_fields 
    | 15 -> NONTERM_rev_object_fields 
    | 16 -> NONTERM_array_values 
    | 17 -> NONTERM_array_values 
    | 18 -> NONTERM_rev_values 
    | 19 -> NONTERM_rev_values 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 16 
let _fsyacc_tagOfErrorTerminal = 14

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | COMMA  -> "COMMA" 
  | COLON  -> "COLON" 
  | RIGHT_BRACK  -> "RIGHT_BRACK" 
  | LEFT_BRACK  -> "LEFT_BRACK" 
  | RIGHT_BRACE  -> "RIGHT_BRACE" 
  | LEFT_BRACE  -> "LEFT_BRACE" 
  | NULL  -> "NULL" 
  | FALSE  -> "FALSE" 
  | TRUE  -> "TRUE" 
  | STRING _ -> "STRING" 
  | ID _ -> "ID" 
  | FLOAT _ -> "FLOAT" 
  | INT _ -> "INT" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | RIGHT_BRACK  -> (null : System.Object) 
  | LEFT_BRACK  -> (null : System.Object) 
  | RIGHT_BRACE  -> (null : System.Object) 
  | LEFT_BRACE  -> (null : System.Object) 
  | NULL  -> (null : System.Object) 
  | FALSE  -> (null : System.Object) 
  | TRUE  -> (null : System.Object) 
  | STRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FLOAT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us;65535us;1us;65535us;0us;1us;1us;65535us;0us;2us;5us;65535us;0us;4us;8us;26us;19us;20us;23us;24us;27us;28us;1us;65535us;5us;6us;1us;65535us;5us;17us;1us;65535us;8us;9us;1us;65535us;8us;25us;|]
let _fsyacc_sparseGotoTableRowOffsets = [|0us;1us;3us;5us;11us;13us;15us;17us;|]
let _fsyacc_stateToProdIdxsTableElements = [| 1us;0us;1us;0us;1us;1us;1us;2us;1us;3us;1us;4us;1us;4us;1us;4us;1us;5us;1us;5us;1us;5us;1us;6us;1us;7us;1us;8us;1us;9us;1us;10us;1us;11us;2us;12us;15us;1us;14us;1us;14us;1us;14us;1us;15us;1us;15us;1us;15us;1us;15us;2us;17us;19us;1us;18us;1us;19us;1us;19us;|]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us;2us;4us;6us;8us;10us;12us;14us;16us;18us;20us;22us;24us;26us;28us;30us;32us;34us;37us;39us;41us;43us;45us;47us;49us;51us;54us;56us;58us;|]
let _fsyacc_action_rows = 29
let _fsyacc_actionTableElements = [|9us;32768us;0us;3us;4us;8us;6us;5us;7us;16us;8us;15us;9us;14us;10us;11us;12us;13us;13us;12us;0us;49152us;0us;16385us;0us;16386us;0us;16387us;1us;16397us;10us;18us;1us;32768us;5us;7us;0us;16388us;8us;16400us;4us;8us;6us;5us;7us;16us;8us;15us;9us;14us;10us;11us;12us;13us;13us;12us;1us;32768us;3us;10us;0us;16389us;0us;16390us;0us;16391us;0us;16392us;0us;16393us;0us;16394us;0us;16395us;1us;16396us;1us;21us;1us;32768us;2us;19us;8us;32768us;4us;8us;6us;5us;7us;16us;8us;15us;9us;14us;10us;11us;12us;13us;13us;12us;0us;16398us;1us;32768us;10us;22us;1us;32768us;2us;23us;8us;32768us;4us;8us;6us;5us;7us;16us;8us;15us;9us;14us;10us;11us;12us;13us;13us;12us;0us;16399us;1us;16401us;1us;27us;0us;16402us;8us;32768us;4us;8us;6us;5us;7us;16us;8us;15us;9us;14us;10us;11us;12us;13us;13us;12us;0us;16403us;|]
let _fsyacc_actionTableRowOffsets = [|0us;10us;11us;12us;13us;14us;16us;18us;19us;28us;30us;31us;32us;33us;34us;35us;36us;37us;39us;41us;50us;51us;53us;55us;64us;65us;67us;68us;77us;|]
let _fsyacc_reductionSymbolCounts = [|1us;1us;1us;1us;3us;3us;1us;1us;1us;1us;1us;1us;1us;0us;3us;5us;0us;1us;1us;3us;|]
let _fsyacc_productionToNonTerminalTable = [|0us;1us;2us;2us;3us;3us;3us;3us;3us;3us;3us;3us;4us;5us;5us;5us;6us;6us;7us;7us;|]
let _fsyacc_immediateActions = [|65535us;49152us;16385us;16386us;16387us;65535us;65535us;16388us;65535us;65535us;16389us;16390us;16391us;16392us;16393us;16394us;16395us;65535us;65535us;65535us;16398us;65535us;65535us;65535us;16399us;65535us;16402us;65535us;16403us;|]
let _fsyacc_reductions = lazy [|
# 169 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> JsonParsing.JsonValue option in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startstart));
# 178 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_prog in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 27 "Parser.fsy"
                                   _1 
                   )
# 27 "Parser.fsy"
                 : JsonParsing.JsonValue option));
# 189 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 30 "Parser.fsy"
                               None 
                   )
# 30 "Parser.fsy"
                 : 'gentype_prog));
# 199 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_value in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 31 "Parser.fsy"
                                 Some _1 
                   )
# 31 "Parser.fsy"
                 : 'gentype_prog));
# 210 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_object_fields in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 34 "Parser.fsy"
                                                                Assoc _2 
                   )
# 34 "Parser.fsy"
                 : 'gentype_value));
# 221 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_array_values in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 35 "Parser.fsy"
                                                               List _2 
                   )
# 35 "Parser.fsy"
                 : 'gentype_value));
# 232 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 36 "Parser.fsy"
                                  String _1 
                   )
# 36 "Parser.fsy"
                 : 'gentype_value));
# 243 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 37 "Parser.fsy"
                               Int _1 
                   )
# 37 "Parser.fsy"
                 : 'gentype_value));
# 254 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> float in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 38 "Parser.fsy"
                                 Float _1 
                   )
# 38 "Parser.fsy"
                 : 'gentype_value));
# 265 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 39 "Parser.fsy"
                                Bool true 
                   )
# 39 "Parser.fsy"
                 : 'gentype_value));
# 275 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 40 "Parser.fsy"
                                 Bool false 
                   )
# 40 "Parser.fsy"
                 : 'gentype_value));
# 285 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 41 "Parser.fsy"
                                Null 
                   )
# 41 "Parser.fsy"
                 : 'gentype_value));
# 295 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_rev_object_fields in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 43 "Parser.fsy"
                                                        List.rev _1 
                   )
# 43 "Parser.fsy"
                 : 'gentype_object_fields));
# 306 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 "Parser.fsy"
                           [] 
                   )
# 46 "Parser.fsy"
                 : 'gentype_rev_object_fields));
# 316 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_value in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 "Parser.fsy"
                                              [(_1,_3)] 
                   )
# 47 "Parser.fsy"
                 : 'gentype_rev_object_fields));
# 328 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_rev_object_fields in
            let _3 = parseState.GetInput(3) :?> string in
            let _5 = parseState.GetInput(5) :?> 'gentype_value in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 48 "Parser.fsy"
                                                                      (_3, _5) :: _1 
                   )
# 48 "Parser.fsy"
                 : 'gentype_rev_object_fields));
# 341 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "Parser.fsy"
                           [] 
                   )
# 51 "Parser.fsy"
                 : 'gentype_array_values));
# 351 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_rev_values in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 52 "Parser.fsy"
                                      List.rev _1 
                   )
# 52 "Parser.fsy"
                 : 'gentype_array_values));
# 362 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_value in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 55 "Parser.fsy"
                                 [_1] 
                   )
# 55 "Parser.fsy"
                 : 'gentype_rev_values));
# 373 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_rev_values in
            let _3 = parseState.GetInput(3) :?> 'gentype_value in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 56 "Parser.fsy"
                                                  _3 :: _1 
                   )
# 56 "Parser.fsy"
                 : 'gentype_rev_values));
|]
# 386 "Parser.fs"
let tables : FSharp.Text.Parsing.Tables<_> = 
  { reductions = _fsyacc_reductions.Value;
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 17;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = tables.Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : JsonParsing.JsonValue option =
    engine lexer lexbuf 0 :?> _
