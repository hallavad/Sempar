//This parser has been writen with help of "Real world OCaml" book By Yaron Minsky, Anil Madhavapeddy, Jason Hickey (chapter 16)
%{
open DataModel 
%}

%start start

%token <int> INT
%token <string> STRING
%token <string> ID
%token COLON
%token COMMA
%token DOT
%token EQUAL 
%token PROJECT_TYPES
%token RULE
%token SOURCES
%token TRANSFORMATION
%token DESTINATION
%token PRECISION
%token PROJECT_PROPERTY
%token GET
%token WHEN
%token EOF

%type <DataModel.Rules> start

%%

//start: precision {{precision = Some $1; rules = []}}

start: 
  | precision rule_list { { precision = Some $1; rules = $2 } }
  | rule_list { { precision = None; rules = $1 } }

precision: PRECISION INT { $2 }

rule_list: 
  |  { [] }
  | rule rule_list { $1 :: $2 }

rule: 
  | RULE COLON types { {name = None; types = $3; sources = []; transformation = None; destination = Property ""} }
  | RULE rule_name COLON types { {name = Some $2; types = $4; sources = []; transformation = None; destination = Property ""} }

//rule: 
//  | RULE rule_name COLON types sources transformations destination { { name = Some $2; types = $4; sources = $5; transformation = $6; destination = $7 } }
//  | RULE COLON types sources transformations destination { { name = None; types = $3; sources = $4; transformation = $5; destination = $6 } }

rule_name: 
  |  { "" }
  | ID rule_name { $1 + " " + $2 }

types: PROJECT_TYPES type_list { $2 }

type_list:
  |  { [] }
  | STRING types { $1 :: $2 }

sources: SOURCES source_list { $2 }

source_list: 
  |  { [] }
  | source source_list { $1 :: $2 }

source: WHEN ID EQUAL ID GET ID { ($2, $4, $6) } 

transformations: 
  | TRANSFORMATION ID { Some (Transform $2) }

destination: DESTINATION property { $2 }

property: PROJECT_PROPERTY ID { Property $2 }
