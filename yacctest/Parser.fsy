//This parser has been writen with help of "Real world OCaml" book By Yaron Minsky, Anil Madhavapeddy, Jason Hickey (chapter 16)
%{
open JsonParsing
%}

%start start

%token <int> INT
%token <float> FLOAT
%token <string> ID
%token <string> STRING
%token TRUE
%token FALSE
%token NULL
%token LEFT_BRACE
%token RIGHT_BRACE
%token LEFT_BRACK
%token RIGHT_BRACK
%token COLON
%token COMMA
%token EOF

%type <DataModel.Rules> start

%%

start: 
  | precision rule_list { { precision: $1; rules: $2 } }
  | rule_list { { precision: None; rules: $1 } }

precision: PRECISION INT 

rule_list: 
  | { [] }
  | rule rule_list { $1 :: $2 }

rule: 
  | RULE rule_name COLON types sources transformations destination {  }
  | RULE COLON rule_body types sources transformations destination { { name: None;  } }

object_fields: rev_object_fields { List.rev $1 };

rev_object_fields:
  | { [] }
  | STRING COLON value { [($1,$3)] }
  | rev_object_fields COMMA STRING COLON value { ($3, $5) :: $1 }

array_values:
  | { [] }
  | rev_values { List.rev $1 }

rev_values:
  | value { [$1] }
  | rev_values COMMA value { $3 :: $1 }