//This parser has been writen with help of "Real world OCaml" book By Yaron Minsky, Anil Madhavapeddy, Jason Hickey (chapter 16)
%{
open JsonParsing
%}

%start start

%token <int> INT
%token <float> FLOAT
%token <string> ID
%token <string> STRING
%token TRUE
%token FALSE
%token NULL
%token LEFT_BRACE
%token RIGHT_BRACE
%token LEFT_BRACK
%token RIGHT_BRACK
%token COLON
%token COMMA
%token PRECISION
%token EOF

%type <DataModel.Rules> start

%%

start: 
  | precision rule_list { { precision: Some $1; rules: $2 } }
  | rule_list { { precision: None; rules: $1 } }

precision: PRECISION INT { $2 }

rule_list: 
  |  { [] }
  | rule rule_list { $1 :: $2 }

rule: 
  | RULE rule_name COLON types sources transformations destination { { name: $2; types: $4, sources: $5, transformation: $5, destination: $7 } }
  | RULE COLON types sources transformations destination { { name: None; types: $3, sources: $4, transformation: $5, destination: $6 } }

types: 
  |  { [] }
  | STRING types { $1 :: $2 }

sources: SOURCES source_list { $2 }

source_list: 
  |  { [] }
  | source sources { $1 :: $2 }

source: WHEN ID EQUAL ID GET ID { ($2, $4, $6) } 

transformation: 
  | TRANSFORMATION ID { Transform $2 }

destination: DESTINATION property { $2 }

property: PROJECT_PROPERTY ID { Property $2 }