//This lexer has been writen with help of "Real world OCaml" book By Yaron Minsky, Anil Madhavapeddy, Jason Hickey (chapter 16)
{

module Lexer

open FSharp.Text.Lexing
open System
open Parser

exception SyntaxError of string

let lexeme = LexBuffer<_>.LexemeString

let newline (lexbuf: LexBuffer<_>) = 
  lexbuf.StartPos <- lexbuf.StartPos.NextLine
}

let white = [' ' '\t']+
let newline = '\r' | '\n' | "\r\n"

rule read =
  parse
  | white       { read lexbuf }
  | newline     { newline lexbuf; read lexbuf }
  | "%%"        { END_PREAMBLE }
  | "//!"       { CONSTRAINT }
  | "|"           { RULE_CASE }
  | ['a'-'z']+  { ID(lexeme lexbuf)}
  | eof         { EOF }
  | _           { raise (Exception (sprintf "SyntaxError: Unexpected char: '%s' Line: %d Column: %d" (lexeme lexbuf) (lexbuf.StartPos.Line+1) lexbuf.StartPos.Column)) }


and read_string str ignorequote =
  parse
  | '"'           { if ignorequote  then (read_string (str+"\\\"") false lexbuf) else STRING (str) }
  | '\\'          { read_string str true lexbuf }
  | [^ '"' '\\']+ { read_string (str+(lexeme lexbuf)) false lexbuf }
  | eof           { raise (Exception ("String is not terminated")) }