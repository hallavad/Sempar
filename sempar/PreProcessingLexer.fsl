//This lexer has been writen with help of "Real world OCaml" book By Yaron Minsky, Anil Madhavapeddy, Jason Hickey (chapter 16)
{
module PreProcessingLexer 

open FSharp.Text.Lexing
open System
open PreProcessingParser

exception SyntaxError of string

let lexeme = LexBuffer<_>.LexemeString

let newline (lexbuf: LexBuffer<_>) = 
  lexbuf.StartPos <- lexbuf.StartPos.NextLine
}

let int = ['-' '+']? ['0'-'9']+
let digit = ['0'-'9']
//let frac = '.' digit*
//let exp = ['e' 'E'] ['-' '+']? digit+
//let float = '-'? digit* frac? exp?

let white = [' ' '\t']+
let newline = '\r' | '\n' | "\r\n"

rule read =
  parse
  | white    { read lexbuf }
  | newline  { newline lexbuf; read lexbuf }
  | "%%"     { END_PREAMBLE }
  | "//!"    { CONSTRAINT }
  | "//"     { COMMENT }
  | "|"      { RULE_CASE }
  | ['a'-'z']+ { ID(lexeme lexbuf)}
  | eof      { EOF }
  | _        { raise (Exception (sprintf "SyntaxError: Unexpected char: '%s' Line: %d Column: %d" (lexeme lexbuf) (lexbuf.StartPos.Line+1) lexbuf.StartPos.Column)) }
