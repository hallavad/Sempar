//This lexer has been writen with help of "Real world OCaml" book By Yaron Minsky, Anil Madhavapeddy, Jason Hickey (chapter 16)
{
module PreProcessingLexer 

open FSharp.Text.Lexing
open System
open PreProcessingParser

exception SyntaxError of string

let lexeme = LexBuffer<_>.LexemeString

let newline (lexbuf: LexBuffer<_>) = 
  lexbuf.StartPos <- lexbuf.StartPos.NextLine
}

let int = ['-' '+']? ['0'-'9']+
let digit = ['0'-'9']
//let frac = '.' digit*
//let exp = ['e' 'E'] ['-' '+']? digit+
//let float = '-'? digit* frac? exp?

let white = [' ' '\t']+
let newline = '\r' | '\n' | "\r\n"

rule read =
  parse
  | white    { read lexbuf }
  | newline  { newline lexbuf; read lexbuf }
  | "//!"    { read_constraint "" lexbuf }
  | "//"     { COMMENT }
  | "|"      { PIPE }
  | "{"      { read_bracket "" 0 lexbuf }
  | ":"      { COLON }
  | ['a'-'z' 'A'-'Z' '_' '-']+ { ID(lexeme lexbuf)}
  | eof      { EOF }
  | _        { raise (Exception (sprintf "SyntaxError: Unexpected char: '%s' Line: %d Column: %d" (lexeme lexbuf) (lexbuf.StartPos.Line+1) lexbuf.StartPos.Column)) }

and read_constraint str =
  parse
  | newline     { CONSTRAINT (str) }
  | [^ '\r' '\n'] { read_constraint (str+(lexeme lexbuf)) lexbuf }

and read_bracket str level = 
  parse
  | "{"         { read_bracket (str+(lexeme lexbuf)) (level+1) lexbuf }
  | "}"         { if level < 1 then CODE (str) else read_bracket (str+(lexeme lexbuf)) (level-1) lexbuf}
  | [^ '{' '}'] { read_bracket (str+(lexeme lexbuf)) level lexbuf}
  | _           { raise (Exception (sprintf "SyntaxError: Mismatched curly braces: Line: %d Column: %d" (lexbuf.StartPos.Line+1) lexbuf.StartPos.Column))}