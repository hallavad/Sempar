// Implementation file for parser generated by fsyacc
module PreProcessingParser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "PreProcessingParser.fsy"

open PPType

# 10 "PreProcessingParser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | RULE_CASE
  | CONSTRAINT
  | END_PREAMBLE
  | ID of (string)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_RULE_CASE
    | TOKEN_CONSTRAINT
    | TOKEN_END_PREAMBLE
    | TOKEN_ID
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_preamble
    | NONTERM_rules
    | NONTERM_rule
    | NONTERM_constraint

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | RULE_CASE  -> 1 
  | CONSTRAINT  -> 2 
  | END_PREAMBLE  -> 3 
  | ID _ -> 4 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_RULE_CASE 
  | 2 -> TOKEN_CONSTRAINT 
  | 3 -> TOKEN_END_PREAMBLE 
  | 4 -> TOKEN_ID 
  | 7 -> TOKEN_end_of_input
  | 5 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_preamble 
    | 3 -> NONTERM_preamble 
    | 4 -> NONTERM_rules 
    | 5 -> NONTERM_rule 
    | 6 -> NONTERM_constraint 
    | 7 -> NONTERM_constraint 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 7 
let _fsyacc_tagOfErrorTerminal = 5

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | RULE_CASE  -> "RULE_CASE" 
  | CONSTRAINT  -> "CONSTRAINT" 
  | END_PREAMBLE  -> "END_PREAMBLE" 
  | ID _ -> "ID" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | RULE_CASE  -> (null : System.Object) 
  | CONSTRAINT  -> (null : System.Object) 
  | END_PREAMBLE  -> (null : System.Object) 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us;65535us;1us;65535us;0us;1us;2us;65535us;0us;2us;5us;6us;1us;65535us;2us;3us;0us;65535us;0us;65535us;|]
let _fsyacc_sparseGotoTableRowOffsets = [|0us;1us;3us;6us;8us;9us;|]
let _fsyacc_stateToProdIdxsTableElements = [| 1us;0us;1us;0us;1us;1us;1us;1us;1us;2us;1us;3us;1us;3us;|]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us;2us;4us;6us;8us;10us;12us;|]
let _fsyacc_action_rows = 7
let _fsyacc_actionTableElements = [|2us;32768us;3us;4us;4us;5us;0us;49152us;0us;16388us;0us;16385us;0us;16386us;2us;32768us;3us;4us;4us;5us;0us;16387us;|]
let _fsyacc_actionTableRowOffsets = [|0us;3us;4us;5us;6us;7us;10us;|]
let _fsyacc_reductionSymbolCounts = [|1us;2us;1us;2us;0us;2us;0us;2us;|]
let _fsyacc_productionToNonTerminalTable = [|0us;1us;2us;2us;3us;4us;5us;5us;|]
let _fsyacc_immediateActions = [|65535us;49152us;65535us;16385us;16386us;65535us;16387us;|]
let _fsyacc_reductions = lazy [|
# 101 "PreProcessingParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> PPType.FSY in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startstart));
# 110 "PreProcessingParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_preamble in
            let _2 = parseState.GetInput(2) :?> 'gentype_rules in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 18 "PreProcessingParser.fsy"
                                             { preamble = _1; rules = _2 } 
                   )
# 18 "PreProcessingParser.fsy"
                 : PPType.FSY));
# 122 "PreProcessingParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 21 "PreProcessingParser.fsy"
                                        "" 
                   )
# 21 "PreProcessingParser.fsy"
                 : 'gentype_preamble));
# 132 "PreProcessingParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _2 = parseState.GetInput(2) :?> 'gentype_preamble in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 22 "PreProcessingParser.fsy"
                                       _1 + " " + _2
                   )
# 22 "PreProcessingParser.fsy"
                 : 'gentype_preamble));
# 144 "PreProcessingParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 25 "PreProcessingParser.fsy"
                              [{constraints = None; name = "Namn"; cases = [(["sten"], "hej" )]}] 
                   )
# 25 "PreProcessingParser.fsy"
                 : 'gentype_rules));
# 154 "PreProcessingParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_constraint in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 28 "PreProcessingParser.fsy"
                                                 _2
                   )
# 28 "PreProcessingParser.fsy"
                 : 'gentype_rule));
# 165 "PreProcessingParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 31 "PreProcessingParser.fsy"
                           "" 
                   )
# 31 "PreProcessingParser.fsy"
                 : 'gentype_constraint));
# 175 "PreProcessingParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _2 = parseState.GetInput(2) :?> 'gentype_constraint in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 32 "PreProcessingParser.fsy"
                                        _1 + " " + _2
                   )
# 32 "PreProcessingParser.fsy"
                 : 'gentype_constraint));
|]
# 188 "PreProcessingParser.fs"
let tables : FSharp.Text.Parsing.Tables<_> = 
  { reductions = _fsyacc_reductions.Value;
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 8;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = tables.Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : PPType.FSY =
    engine lexer lexbuf 0 :?> _
